[{"C:\\Users\\guiog\\Documents\\amaris\\fund_app\\frontend\\src\\index.js":"1","C:\\Users\\guiog\\Documents\\amaris\\fund_app\\frontend\\src\\App.js":"2","C:\\Users\\guiog\\Documents\\amaris\\fund_app\\frontend\\src\\components\\UnsubscriptionForm.js":"3","C:\\Users\\guiog\\Documents\\amaris\\fund_app\\frontend\\src\\components\\TransactionsList.js":"4","C:\\Users\\guiog\\Documents\\amaris\\fund_app\\frontend\\src\\components\\SuscriptionForm.js":"5","C:\\Users\\guiog\\Documents\\amaris\\fund_app\\frontend\\src\\components\\Navigation.js":"6","C:\\Users\\guiog\\Documents\\amaris\\fund_app\\frontend\\src\\components\\FundsList.js":"7","C:\\Users\\guiog\\Documents\\amaris\\fund_app\\frontend\\src\\components\\ClientsList.js":"8","C:\\Users\\guiog\\Documents\\amaris\\fund_app\\frontend\\src\\components\\ClientForm.js":"9"},{"size":278,"mtime":1722454972606,"results":"10","hashOfConfig":"11"},{"size":188,"mtime":1722455310913,"results":"12","hashOfConfig":"11"},{"size":3792,"mtime":1722471959362,"results":"13","hashOfConfig":"11"},{"size":3362,"mtime":1722471640145,"results":"14","hashOfConfig":"11"},{"size":3246,"mtime":1722473178946,"results":"15","hashOfConfig":"11"},{"size":2009,"mtime":1722464526792,"results":"16","hashOfConfig":"11"},{"size":1137,"mtime":1722471453600,"results":"17","hashOfConfig":"11"},{"size":2600,"mtime":1722466916587,"results":"18","hashOfConfig":"11"},{"size":1612,"mtime":1722465144101,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"100h8v",{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"C:\\Users\\guiog\\Documents\\amaris\\fund_app\\frontend\\src\\index.js",[],["40","41"],"C:\\Users\\guiog\\Documents\\amaris\\fund_app\\frontend\\src\\App.js",[],"C:\\Users\\guiog\\Documents\\amaris\\fund_app\\frontend\\src\\components\\UnsubscriptionForm.js",[],"C:\\Users\\guiog\\Documents\\amaris\\fund_app\\frontend\\src\\components\\TransactionsList.js",[],"C:\\Users\\guiog\\Documents\\amaris\\fund_app\\frontend\\src\\components\\SuscriptionForm.js",["42"],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { Form, Button, Container, Alert } from 'react-bootstrap';\r\n\r\nconst SuscriptionForm = () => {\r\n  const [clientId, setClientId] = useState('');\r\n  const [fundId, setFundId] = useState('');\r\n  const [amount, setAmount] = useState('');\r\n  const [clients, setClients] = useState([]);\r\n  const [funds, setFunds] = useState([]);\r\n  const [clientExists, setClientExists] = useState(true);\r\n  const [message, setMessage] = useState('');\r\n\r\n  useEffect(() => {\r\n    const fetchClients = async () => {\r\n      try {\r\n        const response = await axios.get('http://localhost:5000/clients');\r\n        setClients(response.data);\r\n      } catch (error) {\r\n        console.error('Error fetching clients:', error);\r\n      }\r\n    };\r\n\r\n    const fetchFunds = async () => {\r\n      try {\r\n        const response = await axios.get('http://localhost:5000/funds');\r\n        setFunds(response.data);\r\n      } catch (error) {\r\n        console.error('Error fetching funds:', error);\r\n      }\r\n    };\r\n\r\n    fetchClients();\r\n    fetchFunds();\r\n  }, []);\r\n\r\n  const subscribe = async () => {\r\n    try {\r\n      const response = await axios.post('http://localhost:5000/subscribe', { client_id: clientId, fund_id: fundId, amount });\r\n      alert(`Suscripción exitosa: ${response.data.transaction_id}`);\r\n      setMessage('');\r\n      // Limpiar los campos del formulario\r\n      setClientId('');\r\n      setFundId('');\r\n      setAmount('');\r\n    } catch (error) {\r\n      if (error.response.status === 400) {\r\n        setMessage(error.response.data.message);\r\n        setClientExists(false);\r\n      } else {\r\n        alert(error.response.data.message);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleAmountChange = (e) => {\r\n    const value = e.target.value;\r\n    // Solo permitir números\r\n    if (/^\\d*$/.test(value)) {\r\n      setAmount(value);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <h2>Suscribirse a un Fondo</h2>\r\n      {message && <Alert variant=\"danger\">{message}</Alert>}\r\n      <Form>\r\n        <Form.Group>\r\n          <Form.Label>Cliente</Form.Label>\r\n          <Form.Control as=\"select\" value={clientId} onChange={(e) => setClientId(e.target.value)}>\r\n            <option value=\"\">Seleccione un cliente</option>\r\n            {clients.map((client) => (\r\n              <option key={client.ClienteId} value={client.ClienteId}>{client.Name}</option>\r\n            ))}\r\n          </Form.Control>\r\n        </Form.Group>\r\n        <Form.Group>\r\n          <Form.Label>Fondo</Form.Label>\r\n          <Form.Control as=\"select\" value={fundId} onChange={(e) => setFundId(e.target.value)}>\r\n            <option value=\"\">Seleccione un fondo</option>\r\n            {funds.map((fund) => (\r\n              <option key={fund.Id} value={fund.Id}>{fund.Nombre} - Monto Mínimo: {fund.MontoMinimo}</option>\r\n            ))}\r\n          </Form.Control>\r\n        </Form.Group>\r\n        <Form.Group>\r\n          <Form.Label>Amount</Form.Label>\r\n          <Form.Control type=\"text\" value={amount} onChange={handleAmountChange} />\r\n        </Form.Group>\r\n        <Button variant=\"primary\" onClick={subscribe}>Suscribirse</Button>\r\n      </Form>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default SuscriptionForm;\r\n","C:\\Users\\guiog\\Documents\\amaris\\fund_app\\frontend\\src\\components\\Navigation.js",[],"C:\\Users\\guiog\\Documents\\amaris\\fund_app\\frontend\\src\\components\\FundsList.js",[],"C:\\Users\\guiog\\Documents\\amaris\\fund_app\\frontend\\src\\components\\ClientsList.js",[],"C:\\Users\\guiog\\Documents\\amaris\\fund_app\\frontend\\src\\components\\ClientForm.js",[],{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","severity":1,"message":"48","line":11,"column":10,"nodeType":"49","messageId":"50","endLine":11,"endColumn":22},"no-native-reassign",["51"],"no-negated-in-lhs",["52"],"no-unused-vars","'clientExists' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]